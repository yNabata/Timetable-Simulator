import { useState } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";

const initialSubjects = [
  { name: "数学基礎", units: 2, semester: "前期", category: "基礎", days: [], periods: [] },
  { name: "物理入門", units: 1, semester: "前期", category: "入門", days: [], periods: [] },
  { name: "化学入門", units: 1, semester: "前期", category: "入門", days: [], periods: [] },
  { name: "数学講義", units: 2, semester: "後期", prerequisite: "数学基礎", category: "講義", days: [], periods: [] },
  { name: "物理講義", units: 1, semester: "後期", prerequisite: "物理入門", category: "講義", days: [], periods: [] },
  { name: "化学講義", units: 1, semester: "後期", prerequisite: "化学入門", category: "講義", days: [], periods: [] },
];

const days = ["月", "火", "水", "木", "金", "土"];
const periods = [1, 2, 3, 4, 5];

export default function TimetableSimulator() {
  const [subjects, setSubjects] = useState(initialSubjects);
  const [schedule, setSchedule] = useState({});
  const [error, setError] = useState("");
  const [unitCounts, setUnitCounts] = useState({ total: 0, 基礎: 0, 入門: 0, 講義: 0 });

  const handleSelect = (day, period, subjectName) => {
    const subject = subjects.find(s => s.name === subjectName);
    if (!subject && subjectName !== "") return;
    const newSchedule = { ...schedule, [`${day}-${period}`]: subject || null };
    validateSchedule(newSchedule);
    setSchedule(newSchedule);
  };

  const validateSchedule = (schedule) => {
    let totalUnits = 0;
    let takenSubjects = new Set();
    let categoryCounts = { 基礎: 0, 入門: 0, 講義: 0 };
    let errors = [];

    Object.values(schedule).forEach((subj) => {
      if (subj) {
        totalUnits += subj.units;
        takenSubjects.add(subj.name);
        if (subj.category) {
          categoryCounts[subj.category] += subj.units;
        }
      }
    });

    if (totalUnits > 48) {
      errors.push("登録単位数が上限48単位を超えています！");
    }

    subjects.forEach((subj) => {
      if (subj.prerequisite && takenSubjects.has(subj.name) && !takenSubjects.has(subj.prerequisite)) {
        errors.push(`${subj.name}を履修するには${subj.prerequisite}の履修が必要です！`);
      }
    });

    setError(errors.join("\n"));
    setUnitCounts({ total: totalUnits, ...categoryCounts });
  };

  const handleDownload = () => {
    const csvContent = [
      "曜日,時限,科目名,単位数,区分,学期",
      ...days.flatMap(day => 
        periods.map(period => {
          if (day === "土" && period >= 5) return null;
          const subj = schedule[`${day}-${period}`];
          return subj ? `${day},${period},${subj.name},${subj.units},${subj.category},${subj.semester}` : `${day},${period},-,-,-,-`;
        }).filter(Boolean)
      )
    ].join("\n");
    
    const blob = new Blob([csvContent], { type: "text/csv" });
    const link = document.createElement("a");
    link.href = URL.createObjectURL(blob);
    link.download = "timetable.csv";
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  return (
    <div className="p-4">
      <div className="flex justify-between mb-4">
        <h1 className="text-xl font-bold">時間割シミュレーター</h1>
        <Button onClick={() => window.open('/subject-management', '_blank')} className="text-gray-600 bg-gray-200 hover:bg-gray-300">科目管理</Button>
      </div>
      {error && <div className="text-red-500 mb-2">{error}</div>}
      <div className="mb-4">
        <p>合計登録単位数: {unitCounts.total}</p>
        <p>基礎: {unitCounts.基礎}単位</p>
        <p>入門: {unitCounts.入門}単位</p>
        <p>講義: {unitCounts.講義}単位</p>
      </div>
      <div className="grid grid-cols-6 gap-2">
        {days.map((day) => (
          <div key={day} className="border p-2">
            <h2 className="font-semibold">{day}</h2>
            {periods.map((period) => (
              (day !== "土" || period < 5) && (
                <Card key={period} className="mb-2">
                  <CardContent>
                    <p>{period}限</p>
                    <select
                      className="border w-full"
                      onChange={(e) => handleSelect(day, period, e.target.value)}
                    >
                      <option value="">選択なし</option>
                      {subjects.map((s, index) => (
                        <option key={index} value={s.name}>{s.name} ({s.units}単位, {s.semester})</option>
                      ))}
                    </select>
                  </CardContent>
                </Card>
              )
            ))}
          </div>
        ))}
      </div>
      <div className="mt-4">
        <Button onClick={handleDownload}>ダウンロード</Button>
        <Button onClick={() => window.print()} className="ml-2">プリントアウト</Button>
      </div>
    </div>
  );
}
